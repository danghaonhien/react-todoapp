{"version":3,"sources":["components/TodoItems.jsx","components/App.jsx","index.js"],"names":["TodoItems","props","onClick","onChecked","id","text","App","useState","input","setInput","items","setItems","deleteItem","prevItems","filter","index","className","type","name","onChange","e","newValue","target","value","map","todoItem","key","ReactDOM","render","document","getElementById"],"mappings":"4MAgBeA,MAdf,SAAmBC,GACjB,OACE,wBACEC,QAAS,WAELD,EAAME,UAAUF,EAAMG,MAIzBH,EAAMI,OCqDEC,MAvDf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEaF,mBAAS,IAFtB,mBAENG,EAFM,KAECC,EAFD,KAePC,EAAa,SAACR,GAClBO,GAAS,SAACE,GACR,OAAOA,EAAUC,QAAO,SAACJ,EAAOK,GAC9B,OAAOA,IAAUX,SAKvB,OACE,yBAAKY,UAAU,aACb,yBAAKA,UAAU,WACb,2CAEF,yBAAKA,UAAU,QACb,2BACEC,KAAK,OACLC,KAAK,QACLC,SA5BkB,SAACC,GACzB,IAAMC,EAAWD,EAAEE,OAAOC,MAC1Bd,EAASY,IA2BHE,MAAOf,IAET,4BAAQN,QA3BE,WACdS,GAAS,SAACE,GACR,MAAM,GAAN,mBAAWA,GAAX,CAAsBL,OAExBC,EAAS,MAwBH,uCAGJ,6BACE,4BACGC,EAAMc,KAAI,SAACC,EAAUV,GAAX,OACT,kBAAC,EAAD,CACEW,IAAKX,EACLX,GAAIW,EACJV,KAAMoB,EACNtB,UAAWS,WCnDzBe,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.6294ef25.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction TodoItems(props) {\r\n  return (\r\n    <li\r\n      onClick={() => {\r\n        {\r\n          props.onChecked(props.id);\r\n        }\r\n      }}\r\n    >\r\n      {props.text}\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default TodoItems;\r\n","import React, { useState } from \"react\";\n// import { isTemplateExpression } from \"typescript\";\nimport TodoItems from \"./TodoItems\";\n//CHALLENGE: Make this app work by applying what you've learnt.\n//1. When new text is written into the input, its state should be saved.\n//2. When the add button is pressed, the current data in the input should be\n//added to an array.\n//3. The <ul> should display all the array items as <li>s\n\nfunction App() {\n  const [input, setInput] = useState(\"\");\n  const [items, setItems] = useState([]);\n\n  const handleInputChange = (e) => {\n    const newValue = e.target.value;\n    setInput(newValue);\n  };\n  const addItem = () => {\n    setItems((prevItems) => {\n      return [...prevItems, input];\n    });\n    setInput(\"\");\n  };\n\n  const deleteItem = (id) => {\n    setItems((prevItems) => {\n      return prevItems.filter((items, index) => {\n        return index !== id;\n      });\n    });\n  };\n\n  return (\n    <div className='container'>\n      <div className='heading'>\n        <h1>To-Do List</h1>\n      </div>\n      <div className='form'>\n        <input\n          type='text'\n          name='input'\n          onChange={handleInputChange}\n          value={input}\n        />\n        <button onClick={addItem}>\n          <span>Add</span>\n        </button>\n      </div>\n      <div>\n        <ul>\n          {items.map((todoItem, index) => (\n            <TodoItems\n              key={index}\n              id={index}\n              text={todoItem}\n              onChecked={deleteItem} //when delete called, will take an ID of items array\n            /> // key like id\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n// const [input, setInput] = useState(\"\");\n// const [items, setItems] = useState([]);\n\n// const handleInputChange = (e) => {\n//   const newValue = e.target.value;\n//   setInput(newValue);\n// };\n\n// const addItem = () => {\n//   setItems((prevItems) => {\n//     return [...prevItems, input];\n//   });\n//   setInput(\"\");\n// };\n\n// const deleteItem = (id) => {\n//   setItems((prevItems) => {\n//     return prevItems.filter((items, index) => {\n//       return index !== id;\n//     }); //loops through ITEMS array and delete the INDEX that not equal to ID\n//   });\n// };\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n//CHALLENGE: Make this app work by applying what you've learnt.\n//1. When new text is written into the input, its state should be saved.\n//2. When the add button is pressed, the current data in the input should be\n//added to an array.\n//3. The <ul> should display all the array items as <li>s\n"],"sourceRoot":""}